version: '3.8'

services:
  # YugabyteDB
  yugabytedb:
    image: yugabytedb/yugabyte:latest
    command: ["bin/yugabyted", "start", "--daemon=false"]
    ports:
      - "5433:5433"   # YSQL
      - "7001:7000"   # Admin UI
    environment:
      - POSTGRES_USER=yugabyte
      - POSTGRES_PASSWORD=yugabyte
      - POSTGRES_DB=yugabyte
    volumes:
      - yugabyte-data:/home/yugabyte/data
    healthcheck:
      test: ["CMD", "yugabyted", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Zookeeper (required by Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
    depends_on:
      yugabytedb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://yugabytedb:5433/yugabyte
      - SPRING_DATASOURCE_USERNAME=yugabyte
      - SPRING_DATASOURCE_PASSWORD=yugabyte
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JAVA_OPTS=-Xmx512m -Xms256m
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

# Volumes for persistent data
volumes:
  yugabyte-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

# Networks
networks:
  app-network:
    driver: bridge